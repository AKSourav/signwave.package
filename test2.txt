# -*- mode: python ; coding: utf-8 -*-
from PyInstaller.utils.hooks import collect_data_files, collect_submodules
import os
import sys

# Create a startup script to launch browser
with open('launcher.py', 'w') as f:
    f.write('''
import os
import sys
import webbrowser
import subprocess
import time
import signal
import psutil
from threading import Thread

def start_server():
    if getattr(sys, 'frozen', False):
        # Running in a bundle
        executable_path = os.path.join(sys._MEIPASS, 'ASL_Recognition.exe')
    else:
        # Running in a normal Python environment
        executable_path = 'main.py'
    
    subprocess.Popen([executable_path], 
                    creationflags=subprocess.CREATE_NO_WINDOW)

def open_browser():
    # Wait a moment for the server to start
    time.sleep(2)
    webbrowser.open('http://127.0.0.1:3000')

def cleanup_on_exit(main_pid):
    # Get the main process
    try:
        main_process = psutil.Process(main_pid)
        
        # Get all child processes
        children = main_process.children(recursive=True)
        
        # Terminate children
        for child in children:
            child.terminate()
        
        # Terminate main process
        main_process.terminate()
    except:
        pass

if __name__ == '__main__':
    # Start server in a separate thread
    server_thread = Thread(target=start_server)
    server_thread.daemon = True
    server_thread.start()
    
    # Open browser
    open_browser()
    
    # Register cleanup on exit
    import atexit
    atexit.register(cleanup_on_exit, os.getpid())
    
    # Keep the application running
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        sys.exit(0)
''')

block_cipher = None

# Collect all necessary dependencies
hidden_imports = [
    # Uvicorn imports
    'uvicorn',
    'uvicorn.logging',
    'uvicorn.loops',
    'uvicorn.loops.auto',
    'uvicorn.protocols',
    'uvicorn.protocols.http',
    'uvicorn.protocols.http.auto',
    'uvicorn.protocols.websockets',
    'uvicorn.protocols.websockets.auto',
    'uvicorn.lifespan',
    'uvicorn.lifespan.on',
    
    # Scikit-learn imports
    'sklearn',
    'sklearn.tree',
    'sklearn.ensemble',
    'sklearn.ensemble._forest',
    'sklearn.neighbors',
    'sklearn.utils',
    'sklearn.utils._typedefs',
    'sklearn.utils._heap',
    'sklearn.utils._sorting',
    'sklearn.utils._vector_sentinel',
    'sklearn.utils._weight_vector',
    'sklearn.utils._bunch',
    'sklearn.utils.murmurhash',
    'sklearn.utils.validation',
    'sklearn.utils.fixes',
    'sklearn.utils.extmath',
    'sklearn.utils._pprint',
    'sklearn.utils.multiclass',
    'sklearn.utils._encode',
    'sklearn.utils.metaestimators',
    'sklearn.utils._param_validation',
    'sklearn.utils.parallel',
    'sklearn.utils.sparsefuncs',
    'sklearn.metrics',
    'sklearn.metrics.pairwise',
    'sklearn.preprocessing',
    'sklearn.preprocessing._data',
    
    # Other imports
    'mediapipe',
    'fastapi',
    'cv2',
    'numpy',
    'asyncio',
    'typing',
    'starlette.middleware',
    'starlette.middleware.cors',
    'webbrowser',
    'psutil',
]

# Collect all mediapipe data files
mediapipe_datas = collect_data_files('mediapipe')
sklearn_datas = collect_data_files('sklearn')

# Create both analyses
server_a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('model1.p', '.'),
        *mediapipe_datas,
        *sklearn_datas,
    ],
    hiddenimports=hidden_imports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

launcher_a = Analysis(
    ['launcher.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=['webbrowser', 'psutil'],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

# Create PYZ archives
server_pyz = PYZ(server_a.pure, server_a.zipped_data, cipher=block_cipher)
launcher_pyz = PYZ(launcher_a.pure, launcher_a.zipped_data, cipher=block_cipher)

# Create server EXE
server_exe = EXE(
    server_pyz,
    server_a.scripts,
    [],
    exclude_binaries=True,
    name='ASL_Recognition',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    icon='app_icon.ico'
)

# Create launcher EXE
launcher_exe = EXE(
    launcher_pyz,
    launcher_a.scripts,
    [],
    exclude_binaries=True,
    name='ASL_Recognition_Desktop',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    icon='app_icon.ico'
)

# Collect everything into a directory
coll = COLLECT(
    server_exe,
    server_a.binaries,
    server_a.zipfiles,
    server_a.datas,
    launcher_exe,
    launcher_a.binaries,
    launcher_a.zipfiles,
    launcher_a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='ASL_Recognition_Desktop'
)